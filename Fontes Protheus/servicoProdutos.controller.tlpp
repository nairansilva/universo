#include 'tlpp-core.th'

namespace servico.produtos

//------------------------------------------------------------------------------
/*/{Protheus.doc} servicoProdutos
	Serviço para CRUD de produtos - Angular + Protheus.
	@type		class
	@author		Totvs
	@since		13/11/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Class servicoProdutos

	Data jResponse  as Json
	Data nPage      as Numeric
	Data nPageSize  as Numeric
	Data aFilters	as Array
	Data oService   as Object

	Public Method new() as Object
	Public Method getQueryParam()

	@Get("/api/treinamento/v1/servicoProdutos")
	Public Method getAll() as Logical

	@Get("/api/treinamento/v1/erro")
	Public Method erro() as Logical

	@Get("/api/treinamento/v1/servicoProdutos/:id")
	Public Method getById() as Logical

	@Post("/api/treinamento/v1/servicoProdutos/")
	Public Method postProdutos() as Logical

	@Put("/api/treinamento/v1/servicoProdutos/:id")
	Public Method putProdutos() as Logical

	@Delete("/api/treinamento/v1/servicoProdutos/:id")
	Public Method deleteProdutos() as Logical


EndClass

//------------------------------------------------------------------------------
/*/{Protheus.doc} getAll
	Retorna uma lista com todos os produtos.
	@type		Method
	@author		Totvs
	@since		13/11/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Method getAll() as Logical Class servicoProdutos
	local oData := servicoProdutosData():new()

	::aFilters := {}

	::getQueryParam(@::nPage, @::nPageSize, @::aFilters)

	Varinfo("Filtros", ::aFilters)
	::jResponse := oData:get(::nPage, ::nPageSize, ::aFilters)

	if oData:lOk
		::jResponse := oData:GetJSONResponse()
	Else
		::jResponse := SetRestFault(oData:GetCode(), oData:GetMessage())
	EndIf

	oRest:setResponse( ::jResponse )
Return .T.


Method erro() as Logical Class servicoProdutos
	&("dfdf()")
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} getById
	Retorna um produto.
	@type		Method
	@author		Totvs
	@since		13/11/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Method getById() as Logical Class servicoProdutos
	local oData := servicoProdutosData():new(.F.)
	local jPath
	local cId	:= ''

	::aFilters := {}

	jPath := oRest:getPathParamsRequest()
	if ( jPath <> Nil )
		cId := jPath[ 'id' ]
		if ( valtype(cId) == 'U' )
			cId := ''
		endif
	endif

	::getQueryParam(@::nPage, @::nPageSize, @::aFilters)

	Varinfo("Filtros", ::aFilters)
	::jResponse := oData:get(::nPage, ::nPageSize, ::aFilters, , cId)

	if oData:lOk
		::jResponse := oData:GetJSONResponse()
	Else
		::jResponse := SetRestFault(oData:GetCode(), oData:GetMessage())
	EndIf

	oRest:setResponse( ::jResponse )
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} new
	Inicializa a Classe.
	@type		Method
	@author		Totvs
	@since		13/11/2021
	@version	12.1.33
/*/
//------------------------------------------------------------------------------
Method new() as Object Class servicoProdutos
	::nPage     := 1
	::nPageSize := 10
	::oService  := Nil
	::aFilters	:= {}
	::jResponse := JsonObject():new()
Return self

Method postProdutos() as Logical Class servicoProdutos
	Local cBody	:= oRest:getBodyRequest()
	Local jBody			as Json
	Local lReturn	:= .T.

	jBody := JsonObject():New()
	jBody:fromJson(DecodeUtf8(cBody))

	if (SB1->(DbSeek(xFilial("SB1") + jBody["codigo"])))
		SetRestFault(400, "Produto jah cadastrado" )
	else
		RecLock("SB1", .T.)
			SB1->B1_FILIAL	= xFilial("SB1")
			SB1->B1_COD		= jBody["codigo"]
			SB1->B1_DESC	= jBody["descricao"]
			SB1->B1_UM		= jBody["unidade"]
			SB1->B1_LOCPAD	= jBody["armazem"]
		MsUnlock() 

		oRest:setResponse(jBody)
	EndIf


return lReturn

Method putProdutos() as Logical Class servicoProdutos
	Local cBody	:= oRest:getBodyRequest()
	Local jBody			as Json
	Local lReturn	:= .T.
	Local cId		:= ""
	Local jPath := oRest:getPathParamsRequest()
	
	if ( jPath <> Nil )
		cId := jPath[ 'id' ]
		if ( valtype(cId) == 'U' )
			cId := ''
		endif
	endif

	jBody := JsonObject():New()
	jBody:fromJson(DecodeUtf8(cBody))

	if (SB1->(DbSeek(xFilial("SB1") + cId)))
		RecLock("SB1", .F.)
			SB1->B1_FILIAL	= xFilial("SB1")
			SB1->B1_COD		= jBody["codigo"]
			SB1->B1_DESC	= jBody["descricao"]
			SB1->B1_TIPO	= jBody["tipo"]
			SB1->B1_UM		= jBody["unidade"]
			SB1->B1_LOCPAD	= jBody["armazem"]
		MsUnlock() 
	
		oRest:setResponse(jBody)
	else
		SetRestFault(404, "Produto nao encontrado" )
	EndIf

return lReturn


Method deleteProdutos() as Logical Class servicoProdutos
	Local cBody	:= oRest:getBodyRequest()
	Local jBody			as Json
	Local lReturn	:= .T.
	Local cId		:= ""
	Local jPath := oRest:getPathParamsRequest()
	
	if ( jPath <> Nil )
		cId := jPath[ 'id' ]
		if ( valtype(cId) == 'U' )
			cId := ''
		endif
	endif

	jBody := JsonObject():New()
	jBody:fromJson(DecodeUtf8(cBody))

	if (SB1->(DbSeek(xFilial("SB1") + cId)))
		RecLock("SB1", .F.)
			SB1->(Dbdelete())
		MsUnlock() 
	
		oRest:setResponse(jBody)
	else
		SetRestFault(404, "Produto nao encontrado" )
	EndIf

return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} getQueryParam
	Retorna uma lista com todos os produtos.
	@type		Method
	@author		Totvs
	@since		13/11/2021
	@version	12.1.33
	@param		nPage		, numeric	, Número da página que será retornada
	@param		nPageSize	, numeric	, Quantidade de registros por pagina
/*/
//------------------------------------------------------------------------------
Method getQueryParam(nPage as Numeric, nPageSize as Numeric, aFilters as Array) Class servicoProdutos

	If (oRest:getQueryRequest():GetJsonText('codigo') != 'null')
		aAdd(aFilters, {'codigo',oRest:getQueryRequest():GetJsonText('codigo')})
	EndIf

	If (oRest:getQueryRequest():GetJsonText('descricao') != 'null')
		aAdd(aFilters, {'descricao',oRest:getQueryRequest():GetJsonText('descricao')})
	EndIf

	If (oRest:getQueryRequest():GetJsonText('tipo') != 'null')
		aAdd(aFilters, {'tipo',oRest:getQueryRequest():GetJsonText('tipo')})
	EndIf

	If (oRest:getQueryRequest():GetJsonText('pageSize') != 'null')
		nPageSize := Val(oRest:getQueryRequest():GetJsonText('pageSize'))
	Else
		nPageSize := 10
	EndIf

	If (oRest:getQueryRequest():GetJsonText('page') != 'null')
		nPage := Val(oRest:getQueryRequest():GetJsonText('page'))
	Else
		nPage := 1
	Endif

Return
